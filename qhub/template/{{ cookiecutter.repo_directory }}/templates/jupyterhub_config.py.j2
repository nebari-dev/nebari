{% if cookiecutter.cdsdashboards.enabled %}

# ================ CDSDASHBOARDS =====================
c.JupyterHub.allow_named_servers = True
from cdsdashboards.hubextension import cds_extra_handlers
c.JupyterHub.extra_handlers = cds_extra_handlers
from cdsdashboards.app import CDS_TEMPLATE_PATHS
c.JupyterHub.template_paths = CDS_TEMPLATE_PATHS
c.JupyterHub.spawner_class = 'cdsdashboards.hubextension.spawners.variablekube.VariableKubeSpawner'
c.CDSDashboardsConfig.builder_class = 'cdsdashboards.builder.kubebuilder.KubeBuilder'
c.VariableMixin.default_presentation_cmd = ['python3', '-m', 'jhsingle_native_proxy.main']

c.JupyterHub.default_url = '/hub/home'

# Force dashboard creator to select an instance size
c.CDSDashboardsConfig.spawn_default_options = False

c.CDSDashboardsConfig.conda_envs = [
{%- for key in cookiecutter.environments %}
    "{{ cookiecutter.environments[key].name }}",
{%- endfor %}
]

{% else %}

c.JupyterHub.allow_named_servers = False
c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
c.JupyterHub.template_paths = []
c.JupyterHub.extra_handlers = []

{% endif %}

# ==================== THEME =========================
import tornado.web
import qhub_jupyterhub_theme

c.JupyterHub.extra_handlers += [
    (r'/custom/(.*)', tornado.web.StaticFileHandler, {"path": qhub_jupyterhub_theme.STATIC_PATH}),
]

c.JupyterHub.template_paths = [
    qhub_jupyterhub_theme.TEMPLATE_PATH
] + c.JupyterHub.template_paths

c.JupyterHub.template_vars = {
{%- for key, value in cookiecutter.theme.jupyterhub.items() %}
    "{{ key }}": "{{ value | replace('\"', '\\"') }}",
{%- endfor %}
{% if cookiecutter.cdsdashboards.enabled %}
    "cdsdashboards_enabled": True,
    {% if cookiecutter.cdsdashboards.cds_hide_user_named_servers is defined %}
    "cds_hide_user_named_servers": {{ cookiecutter.cdsdashboards.cds_hide_user_named_servers }},
    {% endif %}
    {% if cookiecutter.cdsdashboards.cds_hide_user_dashboard_servers is defined %}
    "cds_hide_user_dashboard_servers": {{ cookiecutter.cdsdashboards.cds_hide_user_dashboard_servers }},
    {% endif %}
{% endif %}
}

# ================= Profiles =====================
from urllib.request import urlopen, Request
import json

QHUB_PROFILES = {{ cookiecutter.profiles.jupyterlab }}

import escapism
import string

def qhub_get_nss_user(username): 
    r = urlopen(Request(
                        f"http://qhub-userinfo:8091/user?username={username}",
                        headers={'Content-Type': 'application/json'},
                        method="POST"
                    )
               )
    user = json.load(r)

    # Example:
    # { "username": "dan","uid": 2000,
    # "groups": [ { "groupname": "admin", "gid": 101 },
    #    { "groupname": "users", "gid": 100 }
    #    ]  }

    assert username == user['username']
    return user

def qhub_configure_profile(user_nss_json, safe_username, profile):
    uid = user_nss_json['uid']
    username = user_nss_json['username']
    groups = user_nss_json['groups']
    primary_gid = groups[0]['gid']
    primary_group_name = groups[0]['groupname']
    secondary_gids = [g['gid'] for g in groups[1:]]

    envvars_fixed = {
       'LD_PRELOAD': 'libnss_wrapper.so',
       'NSS_WRAPPER_PASSWD': '/tmp/passwd',
       'NSS_WRAPPER_GROUP': '/tmp/group',
       'NB_UMASK': '0002',
       'SHELL': '/bin/bash',
       'HOME': '/home/jovyan',
       **(profile.get('kubespawner_override', {}).get('environment', {}))
    }

    def preserve_envvars(spawner):
        # This adds in JUPYTERHUB_ANYONE/GROUP rather than overwrite all env vars,
        # if set for a dashboard to control access.
        return {**envvars_fixed, **spawner.environment}

    profile.setdefault('kubespawner_override', {})['environment'] = preserve_envvars

    profile['kubespawner_override']['lifecycle_hooks'] = {
        "postStart": {
            "exec": {
                "command": ["/bin/sh", "-c", (
                     "curl 'http://qhub-userinfo:8091/etc/passwd' > /tmp/passwd && "
                     "curl 'http://qhub-userinfo:8091/etc/group' > /tmp/group && "
                     "ln -sfn /home/shared /home/jovyan/shared "
                )]
            }
        }
    }

    profile['kubespawner_override']['init_containers'] = [
        {
             "name": "init-nfs",
             "image": "busybox:1.31",
             "command": ["sh", "-c", ' && '.join([
                  "mkdir -p /mnt/home/{username}",
                  "chmod 700 /mnt/home/{username}",
                  "chown {uid}:{primary_gid} /mnt/home/{username}",
                  "mkdir -p /mnt/home/shared",
                  "chmod 777 /mnt/home/shared"
             ] + ["mkdir -p /mnt/home/shared/{groupname} && chmod 2770 /mnt/home/shared/{groupname} && chown 0:{gid} /mnt/home/shared/{groupname}".format(groupname=g['groupname'], gid=g['gid']) for g in groups]).format(username=safe_username, uid=uid, primary_gid=primary_gid)],
             "securityContext": {"runAsUser": 0},
             "volumeMounts": [{"mountPath": "/mnt", "name": "home"}]
        }
    ]

    profile['kubespawner_override']['uid'] = uid
    profile['kubespawner_override']['gid'] = primary_gid
    profile['kubespawner_override']['supplemental_gids'] = secondary_gids
    profile['kubespawner_override']['fs_gid'] = primary_gid

    # Cost monitoring labels
    k8s_safe_chars = set(string.ascii_lowercase + string.digits + '.-_')
    k8s_safe_username = escapism.escape(username.lower().replace('@', '_'), safe=k8s_safe_chars, escape_char='-')
    profile['kubespawner_override']['extra_labels'] = {
        'owner': k8s_safe_username,
        'team': primary_group_name
    }
    return profile

def qhub_list_available_profiles(user_nss_json):
    username = user_nss_json['username']

    safe_chars = set(string.ascii_lowercase + string.digits)
    safe_username = escapism.escape(username, safe=safe_chars, escape_char='-').lower()

    exclude_keys = {'users', 'groups', 'kubespawner_override'}

    groups = set([g['groupname'] for g in user_nss_json['groups']])

    available_profiles = []
    for profile in QHUB_PROFILES:
        restricted_profile = {k: v for k,v in profile.items() if k not in exclude_keys}
        if 'kubespawner_override' in profile:
            # This is to remove typing from kubespawner_override so that we can set
            # kubespawner_override['environment'] as a function instead of a mapping
            restricted_profile['kubespawner_override'] = {**profile['kubespawner_override']}

        #filtered_profile = qhub_configure_profile(username, safe_username, restricted_profile)
        filtered_profile = qhub_configure_profile(user_nss_json, safe_username, {k: v for k,v in profile.items() if k not in exclude_keys})

        if 'users' in profile:
            if username in profile['users']:
                available_profiles.append(filtered_profile)
        elif 'groups' in profile:
            if len(groups & set(profile['groups'])) != 0:
                available_profiles.append(filtered_profile)
        else:
            available_profiles.append(filtered_profile)

    return available_profiles


c.JupyterHub.admin_access = True

async def custom_options_form(self):
    # Save user and generate uid if not seen before
    user_nss_json = qhub_get_nss_user(self.user.name)

    self.profile_list = qhub_list_available_profiles(user_nss_json)

    # Let KubeSpawner inspect profile_list and decide what to return
    return self._options_form_default()

c.KubeSpawner.options_form = custom_options_form
c.LocalProcessSpawner.shell_cmd = ['bash', '-l', '-c']

# ==================== AUTHENTICATION ======================

from oauthenticator.generic import GenericOAuthenticator
c.JupyterHub.authenticator_class = GenericOAuthenticator

# OAUTH_CLIENT_ID, OAUTH_CLIENT_SECRET, OAUTH_CALLBACK_URL should all be imported from env vars automatically
import os

c.GenericOAuthenticator.authorize_url = os.environ.get('KEYCLOAK_AUTHORIZE_URL')
c.GenericOAuthenticator.token_url = os.environ.get('KEYCLOAK_TOKEN_URL')
c.GenericOAuthenticator.userdata_url = os.environ.get('KEYCLOAK_USERDATA_URL')

# TODO Keycloak logout not currently working (only clears JupyterHub session)
c.OAuthenticator.logout_redirect_url = os.environ.get('KEYCLOAK_LOGOUT_URL')

c.GenericOAuthenticator.username_key = 'preferred_username'

def admin_hook(authenticator, handler, authentication):
    user_nss_json = qhub_get_nss_user(authentication['name'])
    groupnames = [g['groupname'] for g in user_nss_json.get('groups',[])]

    authentication['admin'] = 'admin' in groupnames

    return authentication

c.Authenticator.post_auth_hook = admin_hook
