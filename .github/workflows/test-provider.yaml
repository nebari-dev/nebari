name: "Test QHub Provider"

on:
  pull_request: # Workflow only runs for PR against main anyway
  push:
    branches:
      - '**'
    tags:
      - 'v*'
    paths-ignore:
      - "docs/**"
      - "*.md"

env:
  DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  test-render-providers:
    name: 'Test QHub Provider'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider:
          - aws
          - azure
          - do
          - gcp
          - local
    steps:
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        if: ${{ matrix.provider == 'gcp' }}
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Use gcloud CLI
        if: ${{ matrix.provider == 'gcp' }}
        run: gcloud info
      - name: Login to Azure
        uses: azure/login@v1
        if: ${{ matrix.provider == 'azure' }}
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Use az CLI
        if: ${{ matrix.provider == 'azure' }}
        run: az version
      - name: Install QHub
        run: |
          pip install .[dev]
      - name: QHub Initialize
        run: |
          qhub init "${{ matrix.provider }}" --project "test-${{ matrix.provider }}" --domain "${{ matrix.provider }}.qhub.dev" --auth-provider github --disable-prompt
      - name: QHub Render
        run: |
          qhub render -c "qhub-config.yaml" -o "qhub-${{ matrix.provider }}-deployment"
          cp "qhub-config.yaml" "qhub-${{ matrix.provider }}-deployment/qhub-config.yaml"
      - name: QHub Render Artifact
        uses: actions/upload-artifact@master
        with:
          name: "qhub-${{ matrix.provider }}-artifact"
          path: "qhub-${{ matrix.provider }}-deployment"
