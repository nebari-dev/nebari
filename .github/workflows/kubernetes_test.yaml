name: "Kubernetes Tests"

on:
  pull_request: # Workflow only runs for PR against main anyway
  push:
    branches:
      - '**'
    tags:
      - 'v*'
    paths-ignore:
      - "docs/**"
      - "*.md"

concurrency:
  group: kubernetes-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-kubernetes:
    name: "Kubernetes Tests"
    runs-on: self-hosted
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: 'QHUB_GH_BRANCH set for PR'
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "QHUB_GH_BRANCH=${GITHUB_HEAD_REF}" >> "$GITHUB_ENV"
          echo "GITHUB_BASE_REF: ${GITHUB_BASE_REF}"
          echo "GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}"
          echo "GITHUB_REF: ${GITHUB_REF}"
      - name: 'QHUB_GH_BRANCH set for a branch (not a tag)'
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') }}
        # for example QHUB_GH_BRANCH="main"
        run: |
          echo "QHUB_GH_BRANCH=${GITHUB_REF:11}" >> "$GITHUB_ENV"
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
        env:
          CONDA: /home/runnerx/miniconda3
        with:
          python-version: 3.8
          miniconda-version: "latest"
      - name: Install QHub
        run: |
          conda install -c anaconda pip
          pip install .[dev]
      - name: Download and Install Minikube and Kubectl
        run: |
          mkdir -p bin
          pushd bin
          curl -L https://github.com/kubernetes/minikube/releases/download/v1.22.0/minikube-linux-amd64 -o minikube
          chmod +x minikube

          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
          chmod +x kubectl

          echo "$PWD" >> $GITHUB_PATH
          popd
      - name: Start Minikube
        run: |
          sudo docker ps
          sudo usermod -aG docker $USER && newgrp docker
          minikube start --kubernetes-version=1.19.4 --driver=docker --cpus 4 --memory 12288 --wait=all
      - name: Versions
        run: |
          minikube version
          kubectl version
      - name: Add nfs client to kubernetes docker node
        run: |
          minikube ssh "sudo apt update; sudo apt install nfs-common -y"
      - name: Get routing table for docker pods
        run: |
          ip route
      - name: Configure LoadBalancer IPs
        run: |
          python tests/scripts/minikube-loadbalancer-ip.py
      - name: Add DNS entry to hosts
        run: |
          sudo echo "192.168.49.100  github-actions.qhub.dev" | sudo tee -a /etc/hosts
      - name: Enable Minikube metallb
        run: |
          minikube addons enable metallb
      - name: Basic kubectl checks before deployment
        run: |
          kubectl get all,cm,secret,ing -A
      - name: Initialize QHub Cloud
        run: |
          mkdir -p local-deployment
          cd local-deployment
          qhub init local --project=thisisatest  --domain github-actions.qhub.dev --auth-provider=password

          # Need smaller profiles on Minikube
          sed -i -E 's/(cpu_guarantee):\s+[0-9\.]+/\1: 0.25/g' "qhub-config.yaml"
          sed -i -E 's/(mem_guarantee):\s+[A-Za-z0-9\.]+/\1: 0.25G/g' "qhub-config.yaml"

          cat qhub-config.yaml
      - name: Deploy QHub Cloud
        run: |
          cd local-deployment
          qhub deploy --config qhub-config.yaml --disable-prompt
      - name: Basic kubectl checks after deployment
        if: always()
        run: |
          kubectl get all,cm,secret,ing -A
      - name: Check github-actions.qhub.dev resolves
        run: |
          nslookup github-actions.qhub.dev
      - name: Curl jupyterhub login page
        run: |
          curl -k https://github-actions.qhub.dev/hub/home -i

      ### CYPRESS TESTS
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: npm version
        run: |
          npm --version
      - name: Install Cypress dependencies
        run: |
          sudo apt-get -y update
          sudo apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Read example-user password
        run: python -c "import tempfile, os; print('CYPRESS_EXAMPLE_USER_PASSWORD='+open(os.path.join(tempfile.gettempdir(), 'QHUB_DEFAULT_PASSWORD')).read())" >> "$GITHUB_ENV"

      - name: Get qhub-config.yaml full path
        run: echo "QHUB_CONFIG_PATH=`realpath ./local-deployment/qhub-config.yaml`" >> "$GITHUB_ENV"

      - name: Create example-user
        run: |
          qhub keycloak --config "${QHUB_CONFIG_PATH}" adduser example-user "${CYPRESS_EXAMPLE_USER_PASSWORD}"
          qhub keycloak --config "${QHUB_CONFIG_PATH}" listusers

      - name: Sleep to see if it fixes flaky Kubernetes Tests
        run: sleep 60

      - name: Cypress run
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_BASE_URL: https://github-actions.qhub.dev/
        with:
          working-directory: tests_e2e

      - name: Save Cypress screenshots and videos
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-cypress
          path: |
            ./tests_e2e/cypress/screenshots/
            ./tests_e2e/cypress/videos/

      - name: Deployment Pytests
        run: |
          export KEYCLOAK_USERNAME=qhub-user
          export KEYCLOAK_PASSWORD=password
          qhub keycloak --config "${QHUB_CONFIG_PATH}" adduser $KEYCLOAK_USERNAME $KEYCLOAK_PASSWORD
          pytest tests_deployment/ -v

      ### CLEANUP AFTER TESTS
      - name: Cleanup qhub deployment
        run: |
          cd local-deployment
          # This is a known failure at the moment.
          qhub destroy --config qhub-config.yaml || true

      - name: Basic kubectl checks after cleanup
        if: always()
        run: |
          kubectl get all,cm,secret,ing -A
