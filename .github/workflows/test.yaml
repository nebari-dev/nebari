name: "Tests"

on:
  pull_request: # Workflow only runs for PR against main anyway
  push:
    branches:
      - '**'
    tags:
      - 'v*'
    paths-ignore:
      - "docs/**"
      - "*.md"
jobs:
  test-general:
    name: 'Test Package'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install QHub
        run: |
          pip install .[dev]
      - name: Black Formatting
        run: |
          black --version
          black qhub --diff
          black --check qhub
      - name: Flake8 Formatting
        run: |
          flake8 --version
          flake8
      - name: Test QHub
        run: |
          pytest --version
          pytest

  test-render-providers:
    name: 'Test QHub Provider'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider:
          - aws
          - azure
          - do
          - gcp
          - local
    steps:
      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install QHub
        run: |
          pip install .[dev]
      - name: QHub Initialize
        run: |
          qhub init "${{ matrix.provider }}" --project "${{ matrix.provider }}-test" --domain "${{ matrix.provider }}.qhub.dev" --auth-provider github --kubernetes-version "1.18.0" --disable-prompt
      - name: QHub Render
        run: |
          qhub render -c "qhub-config.yaml" -o "qhub-${{ matrix.provider }}-deployment"
          cp "qhub-config.yaml" "qhub-${{ matrix.provider }}-deployment/qhub-config.yaml"
      - name: 'Terraform Format'
        # local provider for qhub uses kubernetes
        # no terraform-state directory present
        if: ${{ matrix.provider != 'local' }}
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.0.0
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'qhub-${{ matrix.provider }}-deployment/terraform-state'
      - name: 'Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.0.0
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: 'qhub-${{ matrix.provider }}-deployment/infrastructure'
      - name: QHub Render Artifact
        uses: actions/upload-artifact@master
        with:
          name: "qhub-${{ matrix.provider }}-artifact"
          path: "qhub-${{ matrix.provider }}-deployment"

  test-kubernetes:
    name: "Kubernetes Tests"
    runs-on: ubuntu-latest

    steps:
      - name: 'QHUB_GH_BRANCH set for PR'
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "QHUB_GH_BRANCH=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          echo "GITHUB_BASE_REF: ${GITHUB_BASE_REF}"
          echo "GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}"
          echo "GITHUB_REF: ${GITHUB_REF}"
      - name: 'QHUB_GH_BRANCH set for a branch (not a tag)'
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/') }}
        # e.g. QHUB_GH_BRANCH="main"
        run: |
          echo "QHUB_GH_BRANCH=${GITHUB_REF:11}" >> $GITHUB_ENV

      - name: 'Checkout Infrastructure'
        uses: actions/checkout@main
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install QHub
        run: |
          pip install .[dev]
      - name: Download and Install Minikube and Kubectl
        run: |
          mkdir -p bin
          pushd bin
          curl -L https://github.com/kubernetes/minikube/releases/download/v1.22.0/minikube-linux-amd64 -o minikube
          chmod +x minikube

          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl
          chmod +x kubectl

          echo "$PWD" >> $GITHUB_PATH
          popd
      - name: Start Minikube
        run: |
          minikube start --kubernetes-version=1.19.4 --driver=docker --cpus 2 --memory 4096 --wait=all
      - name: Versions
        run: |
          minikube version
          kubectl version
      - name: Add nfs client to kubernetes docker node
        run: |
          minikube ssh "sudo apt update; sudo apt install nfs-common -y"
      - name: Get routing table for docker pods
        run: |
          ip route
      - name: Configure LoadBalancer IPs
        run: |
          python tests/scripts/minikube-loadbalancer-ip.py
      - name: Enable Minikube metallb
        run: |
          minikube addons enable metallb
      - name: Basic kubectl checks before deployment
        run: |
          kubectl get all,cm,secret,ing -A
      - name: Initialize QHub Cloud
        run: |
          mkdir -p local-deployment
          cd local-deployment
          qhub init local --project=thisisatest  --domain github-actions.qhub.dev --auth-provider=password

          # Need smaller profiles on Minikube
          sed -i -E 's/(cpu_guarantee):\s+[0-9\.]+/\1: 0.25/g' "qhub-config.yaml"
          sed -i -E 's/(mem_guarantee):\s+[A-Za-z0-9\.]+/\1: 0.25G/g' "qhub-config.yaml"

          cat qhub-config.yaml
      - name: Deploy QHub Cloud
        run: |
          cd local-deployment
          qhub deploy --config qhub-config.yaml --disable-prompt
      - name: Basic kubectl checks after deployment
        run: |
          kubectl get all,cm,secret,ing -A
      - name: Check github-actions.qhub.dev resolves
        run: |
          nslookup github-actions.qhub.dev
      - name: Curl jupyterhub login page
        run: |
          curl -k https://github-actions.qhub.dev/hub/home -i

      ### CYPRESS TESTS

      - name: Read example-user password
        run: python -c "import tempfile, os; print('CYPRESS_EXAMPLE_USER_PASSWORD='+open(os.path.join(tempfile.gettempdir(), 'QHUB_DEFAULT_PASSWORD')).read())" >> $GITHUB_ENV

      - name: Get qhub-config.yaml full path
        run: echo "QHUB_CONFIG_PATH=`realpath ./local-deployment/qhub-config.yaml`" >> $GITHUB_ENV

      - name: Cypress run
        uses: cypress-io/github-action@v2
        env:
          CYPRESS_BASE_URL: https://github-actions.qhub.dev/
        with:
          working-directory: tests_e2e

      - name: Save Cypress screenshots and videos
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e-cypress
          path: |
            ./tests_e2e/cypress/screenshots/
            ./tests_e2e/cypress/videos/

      ### CLEANUP AFTER CYPRESS

      - name: Cleanup qhub deployment
        run: |
          cd local-deployment
          qhub destroy --config qhub-config.yaml
      - name: Basic kubectl checks after cleanup
        run: |
          kubectl get all,cm,secret,ing -A
