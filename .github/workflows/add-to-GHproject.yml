name: Add item to GH project 

on:
  pull_request:
    types: [opened,reopened]
  issues:
    types: [opened, transferred, reopened]

# https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows 
# each step needs an individual GITHUB_TOKEN var
env:
  ORGANIZATION: "Quansight"

jobs:
  new-project-item:
    runs-on: ubuntu-latest
    environment: maintenance
    steps:
      - name: Get project data üëì
        env:
          PROJECT_NUMBER: 14
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectNext(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      id
                      name
                      settings
                    }
                  }
                }
              }
            }' -f org=$ORGANIZATION -f number=$PROJECT_NUMBER > project_data.json

          echo 'PROJECT_ID='$(jq '.data.organization.projectNext.id' project_data.json) >> $GITHUB_ENV

          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          
          echo 'PROGRESS_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name=="In Progress üèÉüèΩ‚Äç‚ôÄÔ∏è") |.id' project_data.json) >> $GITHUB_ENV
          
          echo 'BACKLOG_OPTION_ID='$(jq '.data.organization.projectNext.fields.nodes[] | select(.name== "Status") |.settings | fromjson.options[] | select(.name=="Needs Triage üîç") |.id' project_data.json) >> $GITHUB_ENV
      
      - name: Add PR to project üì•
        # only run on PR
        if: github.event_name == 'pull_request'
        env:
          PR_ID: ${{ github.event.pull_request.node_id }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $pr:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $pr}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
      
      - name: Add issue to project üì•
        # only run on PR
        if: github.event_name == 'issue'
        env:
          ISSUE_ID: ${{ github.event.issue.node_id }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
                addProjectNextItem(input: {projectId: $project, contentId: $issue}) {
                projectNextItem {
                    id
                }
                }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
            
            echo 'ITEM_ID='$item_id >> $GITHUB_ENV

      - name: Set fields - PR üìù
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$PROGRESS_OPTION_ID --silent

      - name: Set fields - ISSUE üìù
        if: github.event_name == 'issue'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=$BACKLOG_OPTION_ID --silent